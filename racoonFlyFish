#!/bin/bash
# exit when any command fails
set -e
#################################################################


export VERSION=0.0.1
if [ $# -eq 1 ]; then if [ $1 == "--version" ]; then echo "$( basename ${0} ) version ${VERSION}, 20221007" ; exit ; fi ; fi

export SCRIPTDIR=$( dirname $0 )
export UTILS=${SCRIPTDIR}/utils
export FLYPOL=${UTILS}/flyePolish
export FISHPOL=${UTILS}/medakaPolish
export RACOONPOL=${UTILS}/raconPolish
export CHIMERAPOL=${UTILS}/chimeraPolish
export PATH=${UTILS}:${PATH}
####source ${POLISHFXNS}

#########################################################################################################
## HELP FUNCTION
#########################################################################################################
function help {
  echo "
	racoonFlyFish : Automated multi-round genome assembly polishing with long reads using combinations of RaCon, Flye, and Medaka.

	Usage: 
		$( basename ${0} ) subcommand options

		Each subcommand activates a different pipeline (RaCon, Flye, Medaka, or all 3).
		Each pipeline has 2-3 subcommand keywords to activate it: 
			racoon or racon, fly or flye, fish or medaka, chimera or trio for all 3, or duo for the first 2. 

	RaCon Polishing :
		$( basename ${0} ) [racoon|racon] [options]

	Flye Polishing :
		$( basename ${0} ) [fly|flye] [options]

	Medaka Polishing :
		$( basename ${0} ) [fish|medaka] [options]

	Dup/Trio/Chimera Polishing :
		$( basename ${0} ) [chimera|trio|duo] [options]


	Common Options to all pipelines:
	

        -i      FOFN	: Required.
        -R      READS	: Required.
	-t	THREADS	: Default = 16.
	-r	ROUNDS	: Defaults = When run separately, 4 for RaCon, 4 for Flye, 1 for Medaka. In chimera-mode, defaults to 1 round of each polisher.
	-S	SLURM	: Use to launch SLURM batch scripts (one per assembly in FOFN) instead of processing serially in current env. Default = false.
	-T	TIME	: Time limit for SLURM. Default = 12:00:00 .
	-M	MEM	: Mem limit for SLURM. Default = 80G .
	-v	VERBOSE	: Default = false.


        RaCon Options:


        Flye Options:


        Medaka Options:


        Chimera Options:


	SLURM Advice (assuming 400-800Mb genome with 10-30X read coverage, 16 threads):
		- Ranking the pipelines by speed:
			- RaCon (a couple of hours for 4 iterations). An 8 hour limit is very safe.
			- Flye (a little bit longer than RaCon). An 8 hour limit is very safe.
			- Medaka 8-12 hours (longest by 2-4 fold). Am 8 hour limit will have mixed results, a 12 hour limit is safe.
			- The trio-chimera pipeline with 1 round each (RaCon->Flye->Medaka) will need 12 hours to be safe as well.
		- Ranking pipelines by memory needed:
			- RaCon uses the least memory. A limit of 24G is a safe bet.
			- Flye and Medaka use much more memory. A limit of something in the range of 50-80G may be necessary.
			- The duo- and trio-chimera pipelines with 1 round each (RaCon->Flye or RaCon->Flye->Medaka) will need 50-80G as well.

"
}




##############################################################################
## DEFAULTS
##############################################################################
export PIPELINE=${1}
export DO_FLY_PIPELINE=false
export DO_RACOON_PIPELINE=false
export DO_FISH_PIPELINE=false
export DO_CHIMERA_PIPELINE=false
export FOFN=""
export READS=""
export THREADS=16
export P=16
export CLEAN=true
export FLYEROUNDS=4
export RACONROUNDS=4
export MEDAKAROUNDS=1
export CHIMERA_RACONROUNDS=1
export CHIMERA_FLYEROUNDS=1
export CHIMERA_MEDAKAROUNDS=1

export MAINWD=${PWD}
export SLURM=false	## if true, THREADS or P also used for NTASKS
export TIME=12:00:00	## SLURM option
export MEM=80G		## SLURM option

export DEBUG=true
export CONTINUE=true
export HELP=false
export VERBOSE=false

export ALLVARS=""


## HELP: CATCH NO ARGS or ERROR WITH FIRST ARG
###################################################################################################################################################################################
if [ $# -eq 0 ]; then help ; exit ; fi
if [ ${PIPELINE} == "fly" ] || [ ${PIPELINE} == "flye" ]; then DO_FLY_PIPELINE=true ; RUN=${FLYPOL} ; fi
if [ ${PIPELINE} == "racon" ] || [ ${PIPELINE} == "racoon" ]; then DO_RACOON_PIPELINE=true ; RUN=${RACOONPOL}; fi
if [ ${PIPELINE} == "fish" ] || [ ${PIPELINE} == "medaka" ]; then DO_FISH_PIPELINE=true ; RUN=${FISHPOL} ; fi
if [ ${PIPELINE} == "chimera" ] || [ ${PIPELINE} == "trio" ] || [ ${PIPELINE} == "duo" ]; then DO_CHIMERA_PIPELINE=true ; RUN=${CHIMERAPOL}; fi
if ! ${DO_FLY_PIPELINE} && ! ${DO_RACOON_PIPELINE} && ! ${DO_FISH_PIPELINE} && ! ${DO_CHIMERA_PIPELINE} ; then echo "Incorrect subcommand given as argument 1. Try again. Here is some help." ; echo ; help ; exit ; fi
###################################################################################################################################################################################




#########################################################################################################
## FIND DEPENDENCIES
#########################################################################################################

export MM2=$( which minimap2 )
export FLYE=$( which flye )
export RACON=$( which racon )
export MEDAKA=$( which medaka_consensus )
export SAMTOOLS=$( which samtools )
export PY3=$( which python3 )
for VAR in MM2 FLYE RACON MEDAKA SAMTOOLS PIPELINE DO_FLYE_PIPELINE DO_RACOON_PIPELINE DO_FISH_PIPELINE DO_CHIMERA_PIPELINE ; do echo -e "${VAR}\t${!VAR}" ; done




#########################################################################################################
## SAVE ALL QC CHECKS FOR PIPELINES
#########################################################################################################
${RUN}

