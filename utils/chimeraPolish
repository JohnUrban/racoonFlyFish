#!/bin/bash
set -e
#################################################################
#source ~/.bash_profile
#source ~/software/conda/source-conda-for-scripts.sh
#conda activate miniasm
#conda activate medaka
#conda activate medakaOct2022


## Collecting some VARs
export SCRIPTNAME=$( basename ${0} )
export SUBSCRIPTDIR=$( dirname ${0} )
if [ -z ${UTILS} ]; then export UTILS=$( dirname ${0} ) ; fi	## should be same as SUBSCRIPT DIR ; if running racoonFlyFish, it will already be in ENV, else it will be taken from versions.txt
export PATH=${UTILS}:${PATH}					## To be sure ; and especially when this script run directly.

## Early source needs
source ${UTILS}/versions.txt
source ${UTILS}/helper-functions.txt



## VERSION MESSAGE
version_check ${@}


## HELP
if [ $# -eq 0 ]; then echo "Usage: $( basename ${0} ) asm.fofn" ; flyhelp ; exit ; fi





##############################################################################
## REQUIRED
##############################################################################
export FOFN=""
export READS=""
export MODEL=""

##############################################################################
## DEFAULTS
##############################################################################
export SCRIPTDIR=${SCRIPTDIR}	## Empty if using this script directly, i.e. not using racoonFlyFish

export MODEL=r941_min_sup_g507

export READS=""

export THREADS=16
export P=${THREADS}


export CHIMERA_RACONROUNDS=1
export CHIMERA_FLYEROUNDS=1
export CHIMERA_MEDAKAROUNDS=1

export RACONITERS=1
export FLYEITERS=1
export MEDAKAITERS=1


export MAINWD=${PWD}
export SLURM=false      ## if true, THREADS or P also used for NTASKS
export TIME=12:00:00    ## SLURM option
export MEM=80G          ## SLURM option


export ALLVARS=""

export MEM=80G
export TIME=12:00:00

export MEDAKA=$( which medaka_consensus )
export MM2=$( which minimap2 )
export MINMAP2=$( which minimap2 )
export FLYE=$( which flye )
export RACON=$( which racon )


export DEBUG=true
export CONTINUE=true
export HELP=false
export VERBOSE=false


##############################################################################
## GET OPTS
##############################################################################
while getopts "i:R:t:r:ST:M:G:d:Hv" arg; do
    case $arg in
        i) export FOFN=${OPTARG} ; FOFNMODE=true ;;
        R) export READS=${OPTARG} ;;
        r) export RACONITERS=${OPTARG} ;
        f) export FLYEITERS=${OPTARG} ;
        k) export MEDAKAITERS=${OPTARG} ;
        t) export THREADS=${OPTARG} ; export P=${THREADS} ;;
        S) export SLURM=true ;;
        T) export TIME=${OPTARG} ;;
        M) export MEM=${OPTARG} ;;
        x) export X=${OPTARG} ;;
        G) export GSIZE=${OPTARG} ;;
        d) export READTYPE=${OPTARG} ;;
        m) export MODEL=${OPTARG} ;;
        v) export VERBOSE=true ;;
        *) help; exit;;
    esac
done




##############################################################################
## PROCESSING ARGS
##############################################################################
if [ -z ${MM2} ]; then echo "minimap2 not found in PATH. Please add it to PATH. Exiting..." ; echo ; medakahelp ; exit ; fi
if [ -z ${FLYE} ]; then echo "flye not found in PATH. Please add it to PATH. Exiting..." ; echo ; medakahelp ; exit ; fi
if [ -z ${RACON} ]; then echo "racon not found in PATH. Please add it to PATH. Exiting..." ; echo ; medakahelp ; exit ; fi
if [ -z ${MEDAKA} ]; then echo "medaka_consensus not found in PATH. Please add it to PATH. Exiting..." ; echo ; medakahelp ; exit ; fi


for REQUIRED in FOFN READS X GSIZE READTYPE MODEL  ; do echo -e "REQUIRED\t${REQUIRED}\t${!REQUIRED}" ; if [ -z ${!REQUIRED} ]; then echo ${REQUIRED} is a required argument. Not given. Exiting. ; echo ; flyhelp ; fi ; done
for ARG in CHIMERA_RACONROUNDS CHIMERA_FLYEROUNDS CHIMERA_MEDAKAROUNDS  THREADS SLURM TIME MEM ; do echo -e "OPTIONS\t${ARG}\t${!ARG}" ; done




##############################################################################
## EXECUTE
##############################################################################
chimera_polish_loop

exit




function write_chimera_script {
  ## INIT SCRIPT
  echo "#!/bin/bash" > ${SCRIPT}
  echo "source ~/.bash_profile" >> ${SCRIPT}
  echo -e "source ~/software/conda/source-conda-for-scripts.sh \n" >> ${SCRIPT}

  ## RACON
  RACONDIR=01-raconpol
  RACONWD=${WD}/${RACONDIR}	# For racpol-asm path later
  #####echo -e "mkdir ${RACONDIR} && cd ${RACONDIR}" >> ${SCRIPT}
  echo -e "conda activate miniasm\n" >> ${SCRIPT}
  echo -e "mkdir ${RACONDIR}\n" >> ${SCRIPT}
  i=0
  echo -e "extractFastxEntries.py --minlen 1 -f ${ASM} > ${RACONDIR}/racon-${B}_${i}.fasta\n" >> ${SCRIPT}
  for j in $( seq 1 ${RACONITERS} ) ; do 
    ASM=${RACONDIR}/racon-${B}_${i}.fasta
    PAF=${RACONDIR}/${B}_${j}.paf
    OUT=${RACONDIR}/racon-${B}_${j}.fasta
    echo -e "minimap2 -t ${P} -x map-ont ${ASM} ${READS} > ${PAF}\n"  >> ${SCRIPT}
    echo -e "racon -t ${P} ${READS} ${PAF} ${ASM} > ${OUT}\n" >> ${SCRIPT}
    i=${j}
  done

  # Last Racon Asm
  ASM=${RACONWD}/racon-${B}_${i}.fasta
  
  ## NO MORE # Move back out of RACONDIR to WD
  ############ echo -e "cd ../\n" >> ${SCRIPT}
  
  ## FLYE
  FLYEDIR=02-flyepol
  FLYEWD=${WD}/${FLYEDIR}
  echo -e "${FLYE} --genome-size ${GSIZE} ${READTYPE} ${READS} --out-dir ${FLYEDIR} --threads ${P} --polish-target ${ASM} --iterations ${FLYEITERS} \n" >> ${SCRIPT}
  ASM=${FLYEWD}/polished_${FLYEITERS}.fasta
  echo -e "ln -s ${ASM} 02-raconpol-flyepol.fasta \n" >> ${SCRIPT}

  ## MEDAKA
  MEDAKADIR=03-medaka
  MEDAKAWD=${WD}/${MEDAKADIR}
  echo -e "conda activate medakaOct2022 \n" >> ${SCRIPT}
  for i in $(seq 1 ${MEDAKAITERS} ); do
    MITERDIR=${MEDAKADIR}/${i}
    echo -e "mkdir -p ${MITERDIR} \n" >> ${SCRIPT}
    echo -e "medaka_consensus -i ${READS} -d ${ASM} -o ${MITERDIR} -t ${P} -m ${MODEL}\n" >> ${SCRIPT}
    ASM=${MITERDIR}/consensus.fasta
  done
  echo -e "ln -s ${ASM} 03-raconpol-flyepol-medaka.fasta \n" >> ${SCRIPT}
}


function chimera_polish_loop {
  OUTDIR=triopol_output
  mkdir -p ${OUTDIR} && cd ${OUTDIR}
  export MAIN=${PWD}
  
  while read line ; do
    export ARR=( $( echo $line ) )
    export B=${ARR[0]}			#raconpol
    export DIR=${B}			#flyepol/medaka
    export ASM=${ARR[1]} 		#racon/flye/medaka
    export SCRIPT=trio-polishing-on-${DIR}.sh
  
    ## make dir	for starting ASM to do all operations under
    WD=${MAIN}/${DIR}
    mkdir ${WD} && cd ${WD} 
  
    echo ${DIR}
    write_chimera_script 

    export JOBNAME=chimerapolish-${B}
    export OUTNAME=slurm-${B}-triopolish-%A.out
    echo

    ## Come back out of init asm DIR
    cd ../
  done < ${FOFN}
  wait
}



